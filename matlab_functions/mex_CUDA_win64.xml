<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2020-2022 The MathWorks, Inc. -->
<!-- CUDA MEX options for MSVC 2022 -->
<config
    Name="NVIDIA CUDA Compiler"
    ShortName="nvcc"
    HostCompiler="MSVCPP190"
    Manufacturer="NVIDIA"
    Version="XXX_CUDA_VER"
    Language="CUDA"
    Priority="A"
    Location="$CUDA_PATH\bin\nvcc.exe" >
    <Details
        CompilerExecutable="$COMPILER"
        CompilerDefines="$COMPDEFINES"
        CompilerFlags="$COMPFLAGS"
        OptimizationFlags="$OPTIMFLAGS"
        DebugFlags="$DEBUGFLAGS"
        IncludeFlags="$INCLUDE"
        LinkerExecutable="$LINKER"
        LinkerFlags="$LINKFLAGS $LINKTYPE"
        LinkerLibraries="$LINKLIBS"
        LinkerDebugFlags="$LINKDEBUGFLAGS"
        LinkerOptimizationFlags="$LINKOPTIMFLAGS"
        CommandLineShell="$VCVARSALLDIR\VCVARSALL.BAT "
        CommandLineShellArg="amd64"
        CompilerDefineFormatter="--compiler-options=/D%s"
        LinkerLibrarySwitchFormatter="lib%s.lib;%s.lib"
        LinkerPathFormatter="/LIBPATH:%s"
        LibrarySearchPath="$$LIB;$$LIBPATH;$$PATH;$$INCLUDE;$MATLABROOT\extern\lib\$ARCH\microsoft"
    />
    <!-- Switch guide: http://msdn.microsoft.com/en-us/library/fwkeyyhe(v=vs.71).aspx -->
    <!-- Note: "&& echo XXXX > NUL" on CMDLINE is ignored by OS and is present to help MEX identify compile and link stages -->
    <vars
        CMDLINE100="$COMPILER -c $COMPFLAGS $OPTIM $COMPDEFINES $INCLUDE $SRC -o $OBJ && echo /Fo > NUL"
        CMDLINE200="$LINKER $LINKFLAGS $LINKTYPE $LINKOPTIM $LINKEXPORTVER $OBJS $LINKLIBS /out:$EXE"
        CMDLINE250="mt -outputresource:$EXE;2 -manifest $MANIFEST"
        CMDLINE300="del $EXP $LIB $MANIFEST $ILK"
          	         
		MATLABMEX="/DMATLAB_MEX_FILE"           
        INCLUDE="-I&quot;$MATLABROOT\extern\include&quot;"

        ARCH_FLAGS="XXX_ARCH_FLAGS"
        NVCC_FLAGS="--std=c++14 --default-stream per-thread --expt-extended-lambda --expt-relaxed-constexpr  -allow-unsupported-compiler $ARCH_FLAGS"
          
        COMPILER="nvcc"
        COMPFLAGS="--compiler-options=/Zp8,/GR,/bigobj,/W3,/EHs,/nologo,/MD,/arch:AVX2 $NVCC_FLAGS"          
        COMPDEFINES="--compiler-options=/D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH,/D_CRT_SECURE_NO_DEPRECATE,/D_SCL_SECURE_NO_DEPRECATE,/D_SECURE_SCL=0,$MATLABMEX"

        OPTIMFLAGS="--compiler-options=/O2,/Oy-,/DNDEBUG"          
        DEBUGFLAGS="--compiler-options=/Zi -g"
          
        LINKER="link"
        LINKFLAGS="/nologo /manifest "
        LINKTYPE="/DLL"
        LINKEXPORT="/EXPORT:mexFunction"
        LINKEXPORTVER="/EXPORT:mexFunction /EXPORT:mexfilerequiredapiversion"
        LINKLIBS="/LIBPATH:&quot;$MATLABROOT\extern\lib\$ARCH\microsoft&quot; libmx.lib libmex.lib libmat.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib libMatlabDataArray.lib libMatlabEngine.lib"
        
        LINKDEBUGFLAGS="/debug /PDB:&quot;$TEMPNAME$LDEXT.pdb&quot;"
        LINKOPTIMFLAGS=""

        OBJEXT=".obj"
        LDEXT=".mexw64"
        SETENV="set COMPILER=$COMPILER
        set COMPFLAGS=/c $COMPFLAGS $COMPDEFINES $MATLABMEX
        set OPTIMFLAGS=$OPTIMFLAGS
        set DEBUGFLAGS=$DEBUGFLAGS
        set LINKER=$LINKER
        set LINKFLAGS=$LINKFLAGS /export:%ENTRYPOINT% $LINKTYPE $LINKLIBS $LINKEXPORT
        set LINKDEBUGFLAGS=/debug /PDB:&quot;%OUTDIR%%MEX_NAME%$LDEXT.pdb&quot;
        set NAME_OUTPUT=/out:&quot;%OUTDIR%%MEX_NAME%%MEX_EXT%&quot;"
    />
    <locationFinder>
        <VCROOT>
            <or>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Enterprise -property installationPath -format value" />
                    <cmdReturns name="set &quot;vcroot=$$&quot;&amp;for /f &quot;delims= &quot; %a in ('type &quot;$$\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt&quot;') do @if exist &quot;$$\VC\Tools\MSVC\%a\bin\HostX64\x64\cl.exe&quot; call echo %vcroot%" />
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Professional -property installationPath -format value" />
                    <cmdReturns name="set &quot;vcroot=$$&quot;&amp;for /f &quot;delims= &quot; %a in ('type &quot;$$\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt&quot;') do @if exist &quot;$$\VC\Tools\MSVC\%a\bin\HostX64\x64\cl.exe&quot; call echo %vcroot%" />
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Community -property installationPath -format value" />
                    <cmdReturns name="set &quot;vcroot=$$&quot;&amp;for /f &quot;delims= &quot; %a in ('type &quot;$$\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt&quot;') do @if exist &quot;$$\VC\Tools\MSVC\%a\bin\HostX64\x64\cl.exe&quot; call echo %vcroot%" />
                </and>
            </or>	
        </VCROOT>
        <SDKROOT>
            <or>
                <hklmExists path="SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0" name="InstallationFolder" />
                <hkcuExists path="SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0" name="InstallationFolder" />
                <hklmExists path="SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v10.0" name="InstallationFolder" />
                <hkcuExists path="SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v10.0" name="InstallationFolder" />
            </or>
        </SDKROOT>
        <VSINSTALLDIR>
            <or>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Enterprise -property installationPath -format value" />
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Professional -property installationPath -format value" />
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Community -property installationPath -format value" />
                </and>
            </or>	
        </VSINSTALLDIR>
        <VCINSTALLDIR>
            <or>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Enterprise -property installationPath -format value" />
                    <cmdReturns name="set &quot;vcroot=$$&quot;&amp;for /f &quot;delims= &quot; %a in ('type &quot;$$\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt&quot;') do @if exist &quot;$$\VC\Tools\MSVC\%a\bin\HostX64\x64\cl.exe&quot; call echo %vcroot%\VC\Tools\MSVC\%a" />
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Professional -property installationPath -format value" />
                    <cmdReturns name="set &quot;vcroot=$$&quot;&amp;for /f &quot;delims= &quot; %a in ('type &quot;$$\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt&quot;') do @if exist &quot;$$\VC\Tools\MSVC\%a\bin\HostX64\x64\cl.exe&quot; call echo %vcroot%\VC\Tools\MSVC\%a" />
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Community -property installationPath -format value" />
                    <cmdReturns name="set &quot;vcroot=$$&quot;&amp;for /f &quot;delims= &quot; %a in ('type &quot;$$\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt&quot;') do @if exist &quot;$$\VC\Tools\MSVC\%a\bin\HostX64\x64\cl.exe&quot; call echo %vcroot%\VC\Tools\MSVC\%a" />
                </and>
            </or>	
        </VCINSTALLDIR>
        <VCVARSALLDIR>
            <or>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Enterprise -property installationPath -format value" />
                    <fileExists name="$$\VC\Auxiliary\Build\vcvarsall.bat" />
                    <dirExists name="$$"/>
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Professional -property installationPath -format value" />
                    <fileExists name="$$\VC\Auxiliary\Build\vcvarsall.bat" />
                    <dirExists name="$$"/>
                </and>
                <and>
                    <envVarExists name="ProgramFiles(x86)" />
                    <fileExists name="$$\Microsoft Visual Studio\Installer\vswhere.exe" />
                    <cmdReturns name="&quot;$$\\vswhere.exe&quot; -version &quot;[17.0,18.0)&quot; -products Microsoft.VisualStudio.Product.Community -property installationPath -format value" />
                    <fileExists name="$$\VC\Auxiliary\Build\vcvarsall.bat" />
                    <dirExists name="$$"/>
                </and>
            </or>	
        </VCVARSALLDIR>
        <KITSROOT>
            <or>
                <hklmExists path="SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                <hkcuExists path="SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                <hklmExists path="SOFTWARE\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                <hkcuExists path="SOFTWARE\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                
            </or>
        </KITSROOT>
        <SDKVERSION>
            <and>
                <or>
                    <hklmExists path="SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                    <hkcuExists path="SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                    <hklmExists path="SOFTWARE\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                    <hkcuExists path="SOFTWARE\Microsoft\Windows Kits\Installed Roots" name="KitsRoot10" />
                    
                </or>
                <!-- For each folder inside '<KITSROOT>\include' check for 'ucrt' and if exists return that folder name -->
                <cmdReturns name="echo off&amp;set &quot;sdkversion=&quot;&amp;(for /f %a IN ('dir &quot;$$\include\&quot; /b /ad-h /on') do ( @if exist &quot;$$\include\%a\ucrt\&quot; set &quot;sdkversion=%a&quot; ))&amp;call echo %sdkversion%" />
            </and>
        </SDKVERSION>
        <!-- g2024064: We need to check the version of the cudart that is going to be used. Otherwise, if the shipping toolkit is going to be used it is possible that CUDA_LIB_PATH will point to a different -->
        <!-- toolkit than the one of the NVCC. -->
        <CUDA_LIB_PATH>
            <or>
                <and>
                    <or>
                        <and>
                            <envVarExists name="MW_NVCC_PATH"/>
                            <fileExists name="$$\..\lib\x64\cudart.lib" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_LIB_PATH"/>
                            <fileExists name="$$\cudart.lib" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_PATH"/>
                            <fileExists name="$$\lib\x64\cudart.lib" />
                        </and>
                        <and>
                            <fileExists name="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXXX_CUDA_VER\lib\x64\cudart.lib" />
                        </and>
                    </or>
                    <dirExists name="$$" />
                    <!-- cmdReturns will replace all backslashes with a single backslash unless they are the very first characters -->
                    <or>
                        <cmdReturns name="(IF DEFINED MW_ALLOW_ANY_CUDA ( true )  ELSE ( false )) > NUL && echo $$" />
                        <cmdReturns name="$$\..\..\bin\nvcc --version | findstr /c:&quot;release XXX_CUDA_VER&quot; > NUL && echo $$" />
                    </or>
                </and>
                <!-- For local paths, duplicate the same syntax in order to execute nvcc --version with quotes around the path, to handle spaces -->
                <and>
                    <or>
                        <and>
                            <envVarExists name="MW_NVCC_PATH"/>
                            <fileExists name="$$\..\lib\x64\cudart.lib" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_LIB_PATH"/>
                            <fileExists name="$$\cudart.lib" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_PATH"/>
                            <fileExists name="$$\lib\x64\cudart.lib" />
                        </and>
                        <and>
                            <fileExists name="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXXX_CUDA_VER\lib\x64\cudart.lib" />
                        </and>
                    </or>
                    <dirExists name="$$" />
                    <!-- cmdReturns will replace all backslashes with a single backslash unless they are the very first characters -->
                    <!-- This means that we need to external or. We cannot have this in one command -->
                    <or>
                        <!-- $(MW_ALLOW_ANY_CUDA) should be set to a non-empty string -->
                        <cmdReturns name="(IF DEFINED MW_ALLOW_ANY_CUDA ( true )  ELSE ( false )) > NUL && echo $$" />
                        <cmdReturns name="&quot;$$\..\..\bin\nvcc&quot; --version | findstr /c:&quot;release XXX_CUDA_VER&quot; > NUL && echo $$" />
                    </or>
                </and>
                <fileExists name="$MATLABROOT\sys\cuda\win64\cuda\lib\x64\cudart.lib"/>
            </or>
            <!-- cmdReturns will replace all backslashes with a single. Thus we need to fix the path --> 
            <or>
                <dirExists name="$$" />
                <dirExists name="\$$" />
            </or>
        </CUDA_LIB_PATH>
        <CUDA_ROOT> <!--  It is more useful to keep the path to the CUDA root instead of the path to nvcc -->
            <or>
                <!-- This section is for UNC paths. We can only execute nvcc --version with no quotes around a UNC path -->
                <and>
                    <or>
                        <and>
                            <envVarExists name="MW_NVCC_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_BIN_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_PATH"/>
                            <fileExists name="$$\bin\nvcc.exe" />
                        </and>
                        <and>
                            <fileExists name="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXXX_CUDA_VER\bin\nvcc.exe" />
                        </and>
                    </or>
                    <!-- cmdReturns will replace all backslashes with a single backslash unless they are the very first characters -->
                    <dirExists name="$$\.." />
                    <or>
                        <cmdReturns name="(IF DEFINED MW_ALLOW_ANY_CUDA ( true )  ELSE ( false )) > NUL && echo $$" />
                        <cmdReturns name="$$\bin\nvcc --version | findstr /c:&quot;release XXX_CUDA_VER&quot; > NUL && echo $$" />
                    </or>
                </and>
                <!-- For local paths, duplicate the same syntax in order to execute nvcc --version with quotes around the path, to handle spaces -->
                <and>
                    <or>
                        <and>
                            <envVarExists name="MW_NVCC_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_BIN_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_PATH"/>
                            <fileExists name="$$\bin\nvcc.exe" />
                        </and>
                        <and>
                            <fileExists name="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXXX_CUDA_VER\bin\nvcc.exe" />
                        </and>
                    </or>
                    <dirExists name="$$\.." />
                    <or>
                        <cmdReturns name="(IF DEFINED MW_ALLOW_ANY_CUDA ( true )  ELSE ( false )) > NUL && echo $$" />
                        <cmdReturns name="&quot;$$\bin\nvcc&quot; --version | findstr /c:&quot;release XXX_CUDA_VER&quot; > NUL && echo $$" />
                    </or>
                </and>
                <and>
                    <fileExists name="$MATLABROOT\sys\cuda\win64\cuda\bin\nvcc.exe"/> <!-- No user-installed nvcc was found. Use the shipped -->
                    <dirExists name="$$\.." />
                </and>
            </or>
            <or>
                <dirExists name="$$" />
                <dirExists name="\$$" />
            </or>
        </CUDA_ROOT>
        <!-- We need to add to the path and link against the right libdevice library -->
        <LIBDEVICE>
            <or>
                <!-- This section is for UNC paths. We can only execute nvcc --version with no quotes around a UNC path -->
                <and>
                    <or>
                        <and>
                            <envVarExists name="MW_NVCC_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_BIN_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_PATH"/>
                            <fileExists name="$$\bin\nvcc.exe" />
                        </and>
                        <and>
                            <fileExists name="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXXX_CUDA_VER\bin\nvcc.exe" />
                        </and>
                    </or>
                    <!-- cmdReturns will replace all backslashes with a single backslash unless they are the very first characters -->
                    <dirExists name="$$\..\nvvm\libdevice" />
                    <or>
                        <cmdReturns name="(IF DEFINED MW_ALLOW_ANY_CUDA ( true )  ELSE ( false )) > NUL && echo $$" />
                        <cmdReturns name="$$\..\..\bin\nvcc --version | findstr /c:&quot;release XXX_CUDA_VER&quot; > NUL && echo $$" />
                    </or>
                </and>
                <!-- For local paths, duplicate the same syntax in order to execute nvcc --version with quotes around the path, to handle spaces -->
                <and>
                    <or>
                        <and>
                            <envVarExists name="MW_NVCC_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_BIN_PATH"/>
                            <fileExists name="$$\nvcc.exe" />
                        </and>
                        <and>
                            <envVarExists name="CUDA_PATH"/>
                            <fileExists name="$$\bin\nvcc.exe" />
                        </and>
                        <and>
                            <fileExists name="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXXX_CUDA_VER\bin\nvcc.exe" />
                        </and>
                    </or>
                    <dirExists name="$$\..\nvvm\libdevice" />
                    <or>
                        <cmdReturns name="(IF DEFINED MW_ALLOW_ANY_CUDA ( true )  ELSE ( false )) > NUL && echo $$" />
                        <cmdReturns name="&quot;$$\..\..\bin\nvcc&quot; --version | findstr /c:&quot;release XXX_CUDA_VER&quot; > NUL && echo $$" />
                    </or>
                </and>
                <and>
                    <fileExists name="$MATLABROOT\sys\cuda\win64\cuda\bin\nvcc.exe"/> <!-- No user-installed nvcc was found. Use the shipped -->
                    <dirExists name="$MATLABROOT\bin\win64" />
                </and>
            </or>
            <or>
                <dirExists name="$$" />
                <dirExists name="\$$" />
            </or>
        </LIBDEVICE>
    </locationFinder>
    <!-- PATH: We need to expand $PATH with the paths to NVVM, NVCC, ptxas and the paths to .lib and .dll -->
    <env
        PATH="$CUDA_PATH;$CUDA_PATH\nvvm\bin;$CUDA_BIN_PATH;$VCINSTALLDIR\bin\HostX64\x64\;$VCROOT\Common7\IDE\VC\vcpackages;$VCROOT\Common7\IDE;$VCROOT\Common7\Tools;$SDKROOT\Bin\$SDKVERSION\x64;$SDKROOT\Bin\$SDKVERSION\x86;$SDKROOT\Bin\x64;$SDKROOT\Bin\x86;"
        INCLUDE="$CUDA_PATH\include;$VCINSTALLDIR\include;$VCINSTALLDIR\atlmfc\include;$KITSROOT\include\$SDKVERSION\ucrt;$KITSROOT\include\$SDKVERSION\shared;$KITSROOT\include\$SDKVERSION\um;$KITSROOT\include\$SDKVERSION\winrt;$MATLABROOT\extern\include;$MATLABROOT\toolbox\parallel\gpu\extern\include"
        LIB="$CUDA_PATH;$CUDA_LIB_PATH;$VCINSTALLDIR\lib\x64;$VCINSTALLDIR\atlmfc\lib\x64;$KITSROOT\Lib\$SDKVERSION\ucrt\x64;$KITSROOT\lib\$SDKVERSION\um\x64;$MATLABROOT\lib\$ARCH"
        LIBPATH="$VCINSTALLDIR\lib\x64;$VCINSTALLDIR\atlmfc\lib\x64"
    />
</config>